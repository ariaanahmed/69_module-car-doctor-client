69-1 Module overview and project setup

69-2 Set basic Layout for Footer and header

69-3 Style Header and create simple banner

69-4 Style Banner Component with gradient overlay

69-5 Create About section with Image Relative Position

69-6 Load Services fake data and display service Card

69-7 (Recap) Create a simple Login page with firebase integration

69-8 (Recap) Sign Up page setup and create Auth Context setup

69-9 (Recap) Create a user and Module Summary and Home work

70-1 Project and set basic server

npm i express cors mongodb dotenv

create database > db name and collection name > carDoctorsServices > services > insert a document > black humburger menu > {} <- click on this icon

70-2 Insert bulk Data In Database and Load services data

70-3 Create checkout Form and load single service data

load all the data:--=-=-

    const serviceCollection = client.db('theCarDoctor').collection('services');

    app.get('/services', async(req, res) => {
      const cursor = serviceCollection.find();
      const result = await cursor.toArray();
      res.send(result)
    });

load single data with id:--=-=-

    app.get('/services/:id', async(req, res) => {
      const id = req.params.id;
      const query = {_id: new ObjectId(id)}
      const options = {
        projection: {_id: 1, title: 1, service_id: 1}
      }
      const result = await serviceCollection.findOne(query, options);
      res.send(result)
    })

70-4 extract booking service Data

70-5 Save order on the order collection using Post Method

ekta single data insert/post/add korar jonno eta

  app.post('/bookings', async(req, res) => {
      const booking = req.body;
      console.log(booking)
      const result = await bookingCollection.insertOne(booking)
      res.send(result);
    })

70-6 Use Query parameter to load user specific data

query = '  ?email=gari@bari.com&sort=1  '

70-7 Display bookings and Service image in a tabular format

70-8 Create Delete API and Delete a service Booking

70-9 Module summary and update booking using Patch

put = new bhabe add kore
patch = jeta thake seta ke update kore

71-1 Module Introduction Project setup and Auth redirect

71-2 Filter orders info by email address Introduction JWT token

booking > newwork > fetch xhr > select a mail > header > copy the header link and visite to know hte infor are public or not

jokhon ekta user login kore tokhon tokhon backend ekta token generate kore and se token ta client side e ashe ebong eita ke store kora hoi local storage and http browser cookie te. local storage er thek http only ta ektu besi secure. local storage and browser cookie dui tay sompurno secure na

as a summary of JWT
i. industry standard
ii. securely transmits information between parties as a json object
iii. digitally signed


71-3 How does JWT token works and create access token secret

localstorge theke sob token dekhar jonno java script er xss (cross side scripting) use korlei hoi

https://jwt.io/ -> libraries -> Filter by -> nodejs -> https://github.com/auth0/node-jsonwebtoken -> 
npm install jsonwebtoken (server side e eta install korte hobe)
-> const jwt = require('jsonwebtoken');
->  require('crypto').randomBytes(64).toString('hex')
-> uporer cmd ta diyay ekta secret key generate hobe .evn file a rekhe conncec korte hboe site er sathe

71-4 Create JWT Token on server, Get jwt token on client side

71-5 (advanced) Send jwt token in the server, verify and decode jwt token

71-6 (Recap) JWT token verify and Handle 401, 403.

71-7 Create JWT token for Sign Up and Social Login users